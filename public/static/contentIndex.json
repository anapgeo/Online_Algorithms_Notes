{"index":{"title":"Σημειώσεις Αλγορίθμων","links":["Άμεσοι-Αλγόριθμοι","Άμεση-Εκμάθηση-(Online-Learning)","Το-πρόβλημα-του-γραμματέα","Προφητικές-ανισότητες(prophet-inequalities)"],"tags":[],"content":"Στα άμεσα προβλήματα ο αλγόριθμος δεν γνωρίζει εξ αρχής όλα τα δεδομένα εισόδου. Θα εξετάσουμε τις εξής κατηγορίες προβλημάτων:\n\nΆμεσοι Αλγόριθμοι: Η είσοδος παρουσίαζεται σταδιακά. Ο αλγόριθμος θα καλείται να παίρνει αποφάσεις με τα τωρινά δεδομένα χωρίς να γνωρίζει το μέλλον\nΆμεση Εκμάθηση (Online Learning): Εδώ θα συναντήσουμε αλγορίθμους πρόβλεψης. Γνωρίζοντας τις k πρώτες εισόδους, θα πρέπει να προβλέψουμε τι θα συμβεί στην k+1 ημέρα\nOptimal Stopping (Στοχαστικές Είσοδοι): Στα προβλήματα αυτά έχουμε κάποια πληροφόρηση για τις τιμές εισόδου(με τη μορφή κάποια κατανομής). Τέτοιων τύπων προβλήματα είναι:\n\nΤο πρόβλημα του γραμματέα\nΠροφητικές ανισότητες(prophet inequalities)\n\n\n\nΣτα άμεσα προβλήματα η δυσκολία είναι η έλλειψη πληροφορίας και όχι η έλλειψη υπολογιστικών πόρων. Ακόμα και εκθετικοί αλγόριθμοι πολλές φορές είναι ικανοποιητικοί\n\nΣυχνά σε όλες τις αναλύσεις που θα δούμε χρησιμοποιείται τo concept του competitive analysis(ανταγωνιστική ανάλυση)."},"Άμεσοι-Αλγόριθμοι":{"title":"Άμεσοι Αλγόριθμοι","links":["Αναζήτηση-σε-ευθεία-(Το-πρόβλημα-της-αγελάδας)","Το-πρόβλημα-του-σκι"],"tags":[],"content":"Competitive Analysis\nΣυχνά σε όλες τις αναλύσεις που θα δούμε χρησιμοποιείται τo concept του competitive analysis(ανταγωνιστική ανάλυση).   Δηλαδή έστω πως η είσοδος μας είναι μια ακολουθία από αιτήματα \\large σ=(σ_1,σ_2,...,σ_t, ...). Ο άμεσος αλγόριθμος δεν γνωρίζει τα αιτήματα αυτά εξ αρχής αλλά του παρουσιάζονται σειριακά. Το αίτημα \\large σ_{i} θα πρέπει να εξυπηρετηθεί χωρίς να γνωρίζουμε το \\large σ_{i+1}. O αλγόριθμος με την εξυπηρέτηση κάθε αιτήματος λαμβάνει ένα κόστος ή κέρδος. Η απόδοση ενός αλγορίθμου υπολογίζεται με βάση το συνολικό κόστος ή κέρδος του αλγορίθμου για την εξυπηρέτηση της ακολουθίας \\large σ θα είναι \\large ALG(σ). Η απόδοση αυτή του αλγορίθμου μας συγκρίνεται με την απόδοση του βέλτιστου αλγορίθμου,  ο οποίος θα γνώριζε εξ αρχής την είσοδο \\large σ οπότε θα επιτύγχανε το μικρότερο δυνατό κόστος ή το μεγαλύτερο κέρδος. Συμβολίζουμε την απόδοση αυτή ως \\large OPT(\\sigma).\nCompetitive Ratio\nΟ λόγος ανταγωνισμού ενός αλγορίθμου \\large ALG είναι ο χειρότερος δυνατός λόγος \\large \\frac{ALG(σ)}{OPT(σ)} από όλες τις δυνατές εισόδους \\large \\sigma. Δηλαδή γενικά θεωρούμε πως υπάρχει κάποιος αντίπαλος(adversary) ο οποίος γνωρίζει του δυο αλγορίθμους και ο σκοπός του είναι να δώσει την είσοδο που θα δώσει τον μεγαλύτερο δυνατό λόγο (αν μιλάμε για κόστος ένω το μικρότερο δυνατό αν μιλάμε για κέρδος).\nKλασσικά Προβλήματα\nΠροβλήματα Αναζήτησης\nΑναζήτηση σε ευθεία (Το πρόβλημα της αγελάδας)\nΤο πρόβλημα του σκι"},"Αναζήτηση-σε-ευθεία-(Το-πρόβλημα-της-αγελάδας)":{"title":"Αναζήτηση σε ευθεία (Το πρόβλημα της αγελάδας)","links":[],"tags":[],"content":"Το πρόβλημα\nΤο πρόβλημα έχει ως εξής:\n\nΥπάρχει μια αγελάδα στο σημείο 0 του άξονα\nΔεξιά και αριστερά της υπάρχουν άπειροι ημιάξονες\nΜπορεί να μετακινθεί δεξιά και αριστερά στην ευθεία\nΣκοπός της είναι να βρεί την πόρτα που βρίσκετε στη θέση x διανύοντας τη μικρότερη δυνατή απόσταση\nΔεν γνωρίζει τίποτα σχετικά με το που βρίσκεται η πόρτα\nΜια στρατηγική της αγελάδας ορίζεται από μια ακολουθία d_0,d_1,\\dots όπου η αγελάδα:\n\nΞεκινώντας από το 0 διανύει απόσταση d_0 προς τα δεξιά\nΕπιστρέφει στο 0 και διανύει d_1 προς τα αριστερά\n…\n\n\n\n\nCompetitive Analysis\nΓια τον αλγόριθμο  ALG που θα επιλέξουμε έχουμε  ALG(x) να είναι η απόσταση που διανύει η αγελάδα.  Επίσης OPT(x) είναι η απόσταση της βέλτιστης λύσης αν γνωρίζαμε την θέση x της πόρτας. Φυσικά  OPT(x)=x.\nΆρα αφού τα ALG(x) και  OPT(x) εκφράζουν κόστοι, το competitive ratio μας θα είναι  \\max_x\\frac{ALG(x)}{OPT(x)}\nΟ βέλτιστος αλγόριθμος\nΕπιλέγουμε να χρησιμοποιήσουμε τον αλγόριθμο  d_i=2^i. Δηλαδή ξεκινάμε και μετακινούμαστε σε απόσταση 1 προς τα δεξιά, στη συνέχεια επιστρέφουμε στο 0 και κινούμαστε απόσταση 2 προς τα αριστερά, επιστρέφουμε στο 0 και κινούμαστε απόσταση 4 προς τα δεξιά κτλ.\nΜπορούμε αν αποδείξουμε  πως ο αλγόριθμος αυτός μπορεί να πετύχει λόγο ανταγωνισμού(competitive ratio) μικρότερο ή ίσο με 9.\nΑπόδειξη:\nΕστώ ότι  d_k &lt; x \\leq d_{k+1}. Τότε ο αντίπαλος μας το καλύτερο που έχει να κάνει ώστε να πετύχει το καλύτερο δυνατό competitive ratio είναι να επιλέξει  x=d_k + ε\nΕίναι προφανές πως ο βέλτιστος αλγόριθμος  OPT αν γνωρίζουμε το x είναι να πάμε απευθείας από το 0 εκεί. Άρα  OPT(x)= d_k + ε\nTo κόστος του αλγορίθμου ALG που προτείνουμε είναι:\n ALG(x)= 2(\\sum_{i=0}^{k+1}d_i)+ d_k + ε = 2(2^{k+2}-1)+2^k + ε\nΤο παραπάνω ισχύει καθώς τις σκέψου πως κάθε απόσταση  d_i, θα πρέπει να τη διανύσουμε 2 φορές, μια για να πάμε στο σημείο αυτό και μια για να γυρίσουμε στο 0.\nΠάμε να υπολογίσουμε το competitive ratio:\n \\frac{ALG(x)}{OPT(x)}=\\frac{2(2^{k+2}-1)+2^k + ε}{2^k + ε}=\\frac{2(2^{k+2}-1)+OPT(x)}{OPT(x)}=\\frac{2(2^{k+2}-1)}{OPT(x)}+1\\leq \\frac{8OPT(x)}{OPT(x)}+1= 9\n 2(2^{k+2}-1)=8\\cdot 2^k -2\\leq 8 \\cdot(2^k +ε)=8OPT(x)\nΣημείωση: Παρατηρούμε πως το competitive ratio σε κάποια φάση γράφεται  \\frac{2(2^{k+2}-1)}{OPT(x)}+1. Αυτό σημαίνει πως ο αντίπαλος θέλει να μεγιστοποιήσει την παράσταση αυτή άρα να ελαχιστοποιήσει το OPT(x). Το ελάχιστο δυνατό OPT(x) το επιτυγχάνει με το  OPT(x)= d_k + ε"},"Προφητικές-ανισότητες(prophet-inequalities)":{"title":"Προφητικές ανισότητες(prophet inequalities)","links":[],"tags":[],"content":""},"Το-πρόβλημα-του-σκι":{"title":"Το πρόβλημα του σκι","links":[],"tags":[],"content":"Το πρόβλημα\n\nΕίμαστε σε διακόπες σε ένα χιονοδρομικό και θέλουμε να μάθουμε σκι\nΗ ενοικίαση εξπλισμού σκι κοστίζει 20 ευρώ/ημέρα\nΗ αγορά του εξοπλισμού κοστίζει 200 ευρώ\nΔεν γνωρίζουμε για πόσες μέρες θα μας αφήσουν να μείνουμε στο χιονοδρομικό\nΗ είσοδος μας είναι τα αιτήματα \\large σ=(σ_1,...,σ_t,...)\nΈστω \\large σ_i το αίτημα της μέρας i\n\nΑν \\large σ_i=Μ παραμένουμε στο χιονοδρομικό\nΑν \\large σ_i=Δ αποχωρούμε από το χιονοδρομικό\n\n\nΩς \\large I_j συμβολίζουμε την ακολουθία εκείνη σύμφωνα με την οποία θα παραμείνουμε στο χιονοδρομικό για j ημέρες. Πχ \\large I_3=(Μ,Μ,Μ,Δ)\nΟ στόχος μας είναι να πληρώσουμε όσο το δυνατον λιγότερα χρήματα σε σύγκριση με το βέλτιστο που θα μπορούσαμε να πράξουμε αν ξέραμε τι θα συνέβαινε\nΌπου βέλτιστο εννούμε \\large OPT(I_j)= \\min\\{ 200,20j\\}\nΈστω \\large ALG_i ο αλγόριθμος που νοικιάζει μέχρι και τη μέρα \\large i-1 και στη συνέχεια αγοράζει τον εξοπλισμό την ημέρα \\large i\n\nCompetitive Analysis\nΓια τον αλγόριθμο \\large ALG που θα επιλέξουμε έχουμε \\large ALG(σ) να είναι το ποσό που θα πληρώσουμε.  Επίσης \\large OPT(σ) είναι το κόστος της βέλτιστης λύσης αν γνωρίζαμε την ακολουθία \\large σ, όπου θα ήταν μια ακολουθία \\large I_j. Φυσικά \\large OPT(I_j)= \\min\\{ 200,20j\\}.\nΆρα αφού τα \\large ALG(σ) και \\large OPT(σ) εκφράζουν κόστοι, το competitive ratio μας θα είναι \\large \\max_σ\\frac{ALG(σ)}{OPT(σ)}\nΠαράδειγμα: Έστω ότι επιλέγουμε τον αλγόριθμo \\large ALG_2 σύμφωνα με τον οποίο ενοικιάζουμε την πρώτη μέρα και αγοράζουμε τη επόμενη. Τότε έστω ακολουθία \\large σ=(Μ,Μ,Μ,Δ)=Ι_3.\nALG_2(\\sigma)= 20 + 200=220\nενώ\nOPT(\\sigma)= 20 +20+20=60\nΆρα \\frac{ALG_2(σ)}{OPT(σ)}=220/60=22/6\nΟ βέλτιστος αλγόριθμος\nΟ βέλτιστος αλγόριθμος για το πρόβλημα μας είναι ο \\large ALG_{10}, ο οποίος έχει λόγο ανταγωνισμού το πολύ 2.\nΑπόδειξη:\nΘεωρούμε 2 πιθανές περιπτώσεις για την είσοδο \\large I_j\nΠερίπτωση 1 (\\large j &lt; 10):\n\n\\large ALG_{10}(I_j)=20j\n\\large OPT(I_j)=min(20j,200)=20j\n\\large r=1\n\nΠερίπτωση 2 (\\large j \\geq 10):\n\n\\large ALG_{10}(I_j)=9 \\cdot 20 +200=380\n\\large OPT(I_j)=min(20j,200)=200\n\\large r=380/200 \\leq 2\n\nΓενίκευση της απόδειξης\n\nΈστω κόστος ενοικίασης 1 ευρώ/μέρα\nΚαι κόστος αγοράς Β ευρω, όπου Β ακέραιος &gt;1\n\nΟ βέλτιστος αλγόριθμος είναι ο \\large ALG_B και έχει competitive ratio το πολύ \\large 2-\\frac{1}{B}\nΑπόδειξη :\nΠερίπτωση 1 (\\large j &lt; Β):\n\n\\large ALG_{Β}(I_j)=OPT(I_j)=j\n\\large r=1\n\nΠερίπτωση 2 (\\large j \\geq 10):\n\n\\large ALG_{Β}(I_j)=(Β-1) +Β= 2Β -1\n\\large OPT(I_j)=Β\n\\large r=\\max_j r(I_j)=2-\\frac{1}{B}\n\nΚάτω Φράγμα\nΜπορούμε να αποδείξουμε πως δεν υπάρχει κανένας ντετερμινιστικός άμεσος αλγόριθμος ο οποίος να πετυχαίνει λόγο ανταγωνισμού μικρότερο από \\large 2-\\frac{1}{B};\nΛήμμα\nΔεν υπάρχει ντετερµινιστικός αλγόριθµος µε λόγο ανταγωνισµού καλύτερο από \\large 2-\\frac{1}{B}\n\nΑπόδειξη:\n\nΕστω ότι επιλέγουμε ένα ντετερμινιστικό αλγόριθμο \\large ALG_i\nΟ αντίπαλος μας για να επιτύχει το μεγαλύτερο δυαντό competitive ratio επιλέγει πάντα να τερματίσει τη διαμονή μας στο χιονοδρομικό τη μέρα που αγοράσαμε τον εξοπλισμό άρα θα μας δίνει ως είσοδο την ακολουθία \\large Ι_i.\n\nΠερίπτωση 1 (\\large i &lt; Β):\n\n\\large ALG_{i}(I_i)= (i-1) + B\n\\large OPT(I_i)= i\n\\large r=\\frac{(i-1)+B}{i}=1 +\\frac{B-1}{i}\\geq 1 +\\frac{B-1}{B}= 2- \\frac{1}{B}\n\nΠερίπτωση 2 (\\large i \\geq B):\n\n\\large ALG_{i}(I_i)=(i-1) +Β\n\\large OPT(I_j)=Β\n\\large r=\\frac{i-1+B}{B} \\geq \\frac{2B-1}{B}= 2-\\frac{1}{B} άρα πετυχαίνουμε το κάτω φράγμα 2-\\frac{1}{B} για i=B\n\n\nΤυχαιοποιημένος Αλγόριθμος\nΜπορούμε να βελτιώσουμε το competitive ratio χρησμιμοποιώντας τυχαιοποίηση στον αλγόριθμο μας;\nΈνας τυχαιοποιημένος αλγόριθμος είναι μια πιθανοτική κατανομή πάνω σε ντετερμινιστικούς αλγορίθμους.\n\nπχ με πιθανότητα 1/3 επιλέγουμε τον ALG_1 και με 2/3 τον ALG_3\n\nΣτη συνέχεια υπολογίζουμε το αναμενόμενο κόστος \\mathbb{E}[ALG(\\sigma)] του τυχαιοποιημένου αλγορίθμου για μια ακολουθία \\sigma\nTo competitive ratio είναι ο μεγαλύτερος(χειρότερος) λόγος \\large \\frac{\\mathbb{E}[ALG(σ)]}{OPT(σ)}  δεδομένων των δυνατών ακολουθιών \\large \\sigma: \\large \\max_\\sigma\\frac{\\mathbb{E}[ALG(σ)]}{OPT(σ)}\nWarm Up\nΣε μια πρώτη προσπάθει δημιουργίας ενός τυχαιοποιημενου αλγορίθμου επιλέγουμε\n\nμε πιθανότητα p το αλγόριθμο ALG_{B/2}\nμε πιθανότητα 1-p τον αλγόριθμο ALG_{B}\n\nΣτη συνέχεια ο αντίπαλος μας θα πρέπει να επιλέξει τη χειρότερη δυνατή είσοδο:\nΟι πιθανές χειρότερες είσοδοι είναι I_{B/2} και I_{B}\nΓια είσοδο I_B:\n\n\\mathbb{E}\n"}}